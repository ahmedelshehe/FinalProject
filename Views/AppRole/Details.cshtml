@using FinalProject.Utilities;
@model AppRole
@{
    List<Permission> permissions = (List<Permission>)ViewBag.permissions;
    List<string> permissionNames = permissions.Select(p => p.Name).Distinct().ToList();
    var UserPermissions = Context.Items["Permissions"] as List<Permission>;
    var checkUncheckAllForAdmin = Context.Items["CheckUncheckAllForAdmin"] as bool?;

    var canEditRoles = UserPermissions == null ? false :
            UserPermissions.Any(p => p.Name == "AppRole" && p.Operation == Operation.Update) ? true : false;
    var disabledToggle = canEditRoles ? "" : "disabled";
    var hiddenToggle = UserPermissions == null ? "hidden" : 
    UserPermissions.HasPermission("AppRole", Operation.Update);
}
@*<h1>Role Details</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Model.Name</td>
        </tr>
    </tbody>
</table>
<hr />
<table class="table">
    <tbody>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            @if (checkUncheckAllForAdmin != null)
            {
                <td>
                    <button type="button" class="btn btn-outline-primary" onclick="checkAllCheckboxes()" @(hiddenToggle)>Check All</button>
                </td>
                <td>
                    <button type="button" class="btn btn-outline-primary" onclick="uncheckAllCheckboxes()" @(hiddenToggle)>Uncheck All</button>
                </td>
            }
        </tr>
    </tbody>
</table>
<form asp-action="AddPermissions" method="post">
    @Html.AntiForgeryToken()
    <input asp-for="Id" type="hidden" name="Id" />
    <table class="table table-striped table-bordered">
        <thead>
            
            <tr>
                <th>Permission Name</th>
                <th>Add</th>
                <th>Show</th>
                <th>Update</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            
            @foreach (var permissionName in permissionNames)
            {
                
                <tr>
                    <td>@StringUtils.InsertSpaceBetweenCamelCaseWords(permissionName)</td>
                    @{
                        var AddPermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Add);
                        @if (AddPermission != null)
                        {
                            @if (Model.Permissions.Contains(AddPermission))
                            {
                                <td><input type="checkbox" name="@permissionName+Add" value="@AddPermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                            }
                            else
                            {

                                <td><input type="checkbox" name="@permissionName+Add" value="@AddPermission.Id" class="form-check-input" @(disabledToggle)></td>
                            }
                        }else{
                            <td></td>
                        }
                    }
                    @{
                        var ShowPermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Show);
                        @if (ShowPermission != null)
                        {
                            @if (Model.Permissions.Contains(ShowPermission))
                            {
                                <td><input type="checkbox" name="@permissionName+Show" value="@ShowPermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                            }
                            else
                            {
                                <td><input type="checkbox" name="@permissionName+Show" value="@ShowPermission.Id" class="form-check-input" @(disabledToggle)></td>
                            }
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    @{
                        var UpdatePermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Update);
                        @if (UpdatePermission != null)
                        {
                            @if (Model.Permissions.Contains(UpdatePermission))
                            {
                                <td><input type="checkbox" name="@permissionName+Update" value="@UpdatePermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                            }
                            else
                            {
                                <td><input type="checkbox" name="@permissionName+Update" value="@UpdatePermission.Id" class="form-check-input" @(disabledToggle)></td>
                            }
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    @{
                        var DeletePermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Delete);
                        @if (DeletePermission != null)
                        {
                            @if (Model.Permissions.Contains(DeletePermission))
                            {
                                <td><input type="checkbox" name="@permissionName+Delete" value="@DeletePermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                            }
                            else
                            {
                                <td><input type="checkbox" name="@permissionName+Delete" value="@DeletePermission.Id" class="form-check-input" @(disabledToggle)></td>
                            }
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                </tr>

            }
            

        </tbody>
    </table>

    <input type="submit" value="Update Permissions" class="btn btn-outline-primary" @(disabledToggle) @(hiddenToggle)>
</form>
<hr />
<div class="container d-inline-block m-2 p-2">
    <div class="row w-25">
        <div class="col @(hiddenToggle)">
            <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-outline-info">Edit</a>
        </div>
        <div class="col">
            <a asp-action="Index" class="btn btn-outline-dark">Back to List</a>
        </div>
    </div>
</div>*@

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>role  Details</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8 col-sm-12">
            <div class="card">
                <div class="card-body">

                    <div class="productdetails">
                        <ul class="product-bar">
                            <li>
                                <h4>@Html.DisplayNameFor(model => model.Name)</h4>
                                <h6>@Html.DisplayFor(model => model.Name)	</h6>
                            </li>

                        </ul>
                    </div>
                </div>
            </div>
        </div>
      @*  <div class="col-lg-12">
            <div class="form-group " style="text-align:center">
                @if (checkUncheckAllForAdmin != null)
                {
                    
                        <button type="button" class="btn btn-outline-primary" onclick="checkAllCheckboxes()" @(hiddenToggle)>Check All</button>
                    
                    
                        <button type="button" class="btn btn-outline-primary" onclick="uncheckAllCheckboxes()" @(hiddenToggle)>Uncheck All</button>
                    
                }
              

            </div>
        </div>*@

        <form asp-action="AddPermissions" method="post" style="margin-bottom:20px">
            @Html.AntiForgeryToken()
            <input asp-for="Id" type="hidden" name="Id" />
           
            <table class="table table-hover">
                <thead>

                    <tr>
                        <th scope="col">Permission Name</th>
                        <th scope="col">Add</th>
                        <th scope="col">Show</th>
                        <th scope="col">Update</th>
                        <th scope="col">Delete</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var permissionName in permissionNames)
                    {

                        <tr>
                            <td>@StringUtils.InsertSpaceBetweenCamelCaseWords(permissionName)</td>
                            @{
                                var AddPermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Add);
                                @if (AddPermission != null)
                                {
                                    @if (Model.Permissions.Contains(AddPermission))
                                    {
                                        <td><input type="checkbox" name="@permissionName+Add" value="@AddPermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                                    }
                                    else
                                    {

                                        <td><input type="checkbox" name="@permissionName+Add" value="@AddPermission.Id" class="form-check-input" @(disabledToggle)></td>
                                    }
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                            @{
                                var ShowPermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Show);
                                @if (ShowPermission != null)
                                {
                                    @if (Model.Permissions.Contains(ShowPermission))
                                    {
                                        <td><input type="checkbox" name="@permissionName+Show" value="@ShowPermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                                    }
                                    else
                                    {
                                        <td><input type="checkbox" name="@permissionName+Show" value="@ShowPermission.Id" class="form-check-input" @(disabledToggle)></td>
                                    }
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                            @{
                                var UpdatePermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Update);
                                @if (UpdatePermission != null)
                                {
                                    @if (Model.Permissions.Contains(UpdatePermission))
                                    {
                                        <td><input type="checkbox" name="@permissionName+Update" value="@UpdatePermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                                    }
                                    else
                                    {
                                        <td><input type="checkbox" name="@permissionName+Update" value="@UpdatePermission.Id" class="form-check-input" @(disabledToggle)></td>
                                    }
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                            @{
                                var DeletePermission = permissions.FirstOrDefault(p => p.Name == permissionName && p.Operation == Operation.Delete);
                                @if (DeletePermission != null)
                                {
                                    @if (Model.Permissions.Contains(DeletePermission))
                                    {
                                        <td><input type="checkbox" name="@permissionName+Delete" value="@DeletePermission.Id" class="form-check-input" checked @(disabledToggle)></td>
                                    }
                                    else
                                    {
                                        <td><input type="checkbox" name="@permissionName+Delete" value="@DeletePermission.Id" class="form-check-input" @(disabledToggle)></td>
                                    }
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        </tr>

                    }


                </tbody>
            </table>

@*            <input type="submit" value="Update Permissions" class="btn btn-outline-primary" @(disabledToggle) @(hiddenToggle)>
*@        </form>
        <div class="col-lg-12">
            <div class="form-group">
                <span @(hiddenToggle)>
                    <a asp-action="Edit" class="btn " style="color: #fff;
    background-color: #FF9F43;
    border-color: #FF9F43" asp-route-id="@Model?.Id">Edit</a>
                </span>
                <a asp-action="Index" class="btn " style="color: #fff;
    background-color: #637381;
    border-color: #637381">Cancel</a>


            </div>
        </div>

    </div>
    <div></div>
</div>
<script src="~/js/main.js"></script>

